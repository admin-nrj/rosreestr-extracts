services:
  # PostgresSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: rosreestr-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-rosreestr_extracts}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    secrets:
      - db-password
    ports:
      - "5433:5432"
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rosreestr-network

  # Redis for Bull queues
  redis:
    image: redis:7-alpine
    container_name: rosreestr-redis
#    ports:
#      - "${REDIS_PORT:-6379}:6379"
    expose:
      - 6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - rosreestr-network

  # Database Migrations (Init Container)
  db-migrations:
    build:
      context: .
      dockerfile: migrations.Dockerfile
    container_name: rosreestr-db-migrations
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
      DB_LOGGING: "true"
      NODE_ENV: production
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rosreestr-network
    restart: "no"  # Run once and exit

  # Auth Service (gRPC)
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: rosreestr-auth-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - rosreestr-network

  # Users Service (gRPC)
  users-service:
    build:
      context: .
      dockerfile: apps/users-service/Dockerfile
    container_name: rosreestr-users-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - rosreestr-network

  # Orders Service (gRPC + Bull Producer)
  orders-service:
    build:
      context: .
      dockerfile: apps/orders-service/Dockerfile
    container_name: rosreestr-orders-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
      REDIS_HOST: redis
      ORDERS_SERVICE_PORT: 5003
    expose:
      - 5003
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - rosreestr-network

  # API Gateway (HTTP REST)
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: rosreestr-api-gateway
    environment:
      REDIS_HOST: redis
      AUTH_SERVICE_HOST: auth-service
      USERS_SERVICE_HOST: users-service
      ORDERS_SERVICE_HOST: orders-service
      ROSREESTR_USERS_SERVICE_HOST: rosreestr-users-service
      ANOMALY_QUESTIONS_SERVICE_HOST: anomaly-questions-service
    ports:
      - "${API_GATEWAY_PORT:-3003}:3003"
    depends_on:
      - auth-service
      - users-service
      - orders-service
      - rosreestr-users-service
      - anomaly-questions-service
    networks:
      - rosreestr-network

  # Rosreestr Users Service (gRPC)
  rosreestr-users-service:
    build:
      context: .
      dockerfile: apps/rosreestr-users-service/Dockerfile
    container_name: rosreestr-rosreestr-users-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
      ROSREESTR_USERS_SERVICE_PORT: 5004
    expose:
      - 5004
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - rosreestr-network

  # Anomaly Questions Service (gRPC)
  anomaly-questions-service:
    build:
      context: .
      dockerfile: apps/rosreestr-anomaly-questions/Dockerfile
    container_name: rosreestr-anomaly-questions-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
      ANOMALY_QUESTIONS_SERVICE_PORT: 5005
    expose:
      - 5005
    secrets:
      - db-password
    depends_on:
      postgres:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    networks:
      - rosreestr-network

  # Order Processing Worker 1
  order-worker-1:
    build:
      context: .
      dockerfile: apps/order-processing-worker/Dockerfile
    container_name: rosreestr-order-worker-1
    environment:
      ROSREESTR_USER_NAME: 'SFedotova'
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_NAME: ${DB_NAME:-rosreestr_extracts}
      REDIS_HOST: redis
      ORDERS_SERVICE_HOST: orders-service
      ORDERS_SERVICE_PORT: 5003
      ROSREESTR_USERS_SERVICE_HOST: rosreestr-users-service
      ROSREESTR_USERS_SERVICE_PORT: 5004
      ANOMALY_QUESTIONS_SERVICE_HOST: anomaly-questions-service
      ANOMALY_QUESTIONS_SERVICE_PORT: 5005
    secrets:
      - db-password
    volumes:
      - ./logs:/app/logs
      - ./downloads:/app/downloads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
      orders-service:
        condition: service_started
      rosreestr-users-service:
        condition: service_started
      anomaly-questions-service:
        condition: service_started
#    restart: unless-stopped
    networks:
      - rosreestr-network

volumes:
  postgres_data:
  redis_data:

networks:
  rosreestr-network:
    driver: bridge

secrets:
  db-password:
    file: ./db/password.txt
