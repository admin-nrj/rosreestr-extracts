// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: orders.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Error } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "orders";

export interface Order {
  id?: number | undefined;
  userId: number;
  cadNum: string;
  rosreestrOrderNum?: string | undefined;
  recipientName: string;
  status?: string | undefined;
  isComplete?: boolean | undefined;
  comment?: string | undefined;
  rosreestrRegistrationStartedAt?: Timestamp | undefined;
  rosreestrRegisteredAt?: Timestamp | undefined;
  completedAt?: Timestamp | undefined;
  createdAt?: Timestamp | undefined;
  updatedAt?: Timestamp | undefined;
}

export interface GetAllOrdersRequest {
}

export interface GetAllOrdersResponse {
  data: Order[];
  error?: Error | undefined;
}

export interface CreateOrdersRequest {
  orders: Order[];
}

export interface CreateOrdersResponse {
  data: Order[];
  error?: Error | undefined;
}

export interface GetOrderRequest {
  id: number;
}

export interface OrderResponse {
  order?: Order | undefined;
  error?: Error | undefined;
}

export interface UpdateOrderRequest {
  id: number;
  rosreestrOrderNum?: string | undefined;
  recipientName?: string | undefined;
  status?: string | undefined;
  isComplete?: boolean | undefined;
  comment?: string | undefined;
  rosreestrRegistrationStartedAt?: Timestamp | undefined;
  rosreestrRegisteredAt?: Timestamp | undefined;
  completedAt?: Timestamp | undefined;
}

export const ORDERS_PACKAGE_NAME = "orders";

export interface OrdersServiceClient {
  createOrders(request: CreateOrdersRequest): Observable<CreateOrdersResponse>;

  getAllOrders(request: GetAllOrdersRequest): Observable<GetAllOrdersResponse>;

  getOrder(request: GetOrderRequest): Observable<OrderResponse>;

  updateOrder(request: UpdateOrderRequest): Observable<OrderResponse>;
}

export interface OrdersServiceController {
  createOrders(
    request: CreateOrdersRequest,
  ): Promise<CreateOrdersResponse> | Observable<CreateOrdersResponse> | CreateOrdersResponse;

  getAllOrders(
    request: GetAllOrdersRequest,
  ): Promise<GetAllOrdersResponse> | Observable<GetAllOrdersResponse> | GetAllOrdersResponse;

  getOrder(request: GetOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  updateOrder(request: UpdateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrdersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrders", "getAllOrders", "getOrder", "updateOrder"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrdersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrdersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDERS_SERVICE_NAME = "OrdersService";
