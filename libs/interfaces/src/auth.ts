// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum UserRole {
  /** USER_ROLE_UNSPECIFIED - обязательное значение по умолчанию в proto3 */
  USER_ROLE_UNSPECIFIED = 0,
  USER = 1,
  ADMIN = 2,
  UNRECOGNIZED = -1,
}

export enum ErrorCode {
  /** ERROR_CODE_UNSPECIFIED - No error */
  ERROR_CODE_UNSPECIFIED = 0,
  /** INVALID_INPUT - Validation errors (400) */
  INVALID_INPUT = 1000,
  INVALID_EMAIL_FORMAT = 1001,
  INVALID_PASSWORD_FORMAT = 1002,
  PASSWORD_TOO_SHORT = 1003,
  MISSING_REQUIRED_FIELD = 1004,
  /** INVALID_CREDENTIALS - Authentication errors (401) */
  INVALID_CREDENTIALS = 2000,
  INVALID_TOKEN = 2001,
  TOKEN_EXPIRED = 2002,
  /** USER_NOT_ACTIVE - Authorization errors (403) */
  USER_NOT_ACTIVE = 3000,
  EMAIL_NOT_VERIFIED = 3001,
  INSUFFICIENT_PERMISSIONS = 3002,
  /** USER_NOT_FOUND - Resource errors (404/409) */
  USER_NOT_FOUND = 4000,
  USER_ALREADY_EXISTS = 4001,
  REFRESH_TOKEN_NOT_FOUND = 4002,
  /** INTERNAL_ERROR - Server errors (500) */
  INTERNAL_ERROR = 5000,
  DATABASE_ERROR = 5001,
  HASH_ERROR = 5002,
  UNRECOGNIZED = -1,
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
}

export interface RegisterResponse {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  user?: User | undefined;
  error?: string | undefined;
  errorCode?: ErrorCode | undefined;
}

export interface User {
  userId: number;
  email: string;
  name: string;
  role: UserRole;
  isActive: boolean;
  lastLoginAt: string;
  emailVerified: boolean;
}

export interface LoginResponse {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  user?: User | undefined;
  error?: string | undefined;
  errorCode?: ErrorCode | undefined;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  valid: boolean;
  user?: User | undefined;
  error?: string | undefined;
  errorCode?: ErrorCode | undefined;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  user?: User | undefined;
  error?: string | undefined;
  errorCode?: ErrorCode | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<LoginResponse>;

  register(request: RegisterRequest): Observable<RegisterResponse>;

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;
}

export interface AuthServiceController {
  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register", "validateToken", "refreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
