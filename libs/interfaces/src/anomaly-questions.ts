// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: anomaly-questions.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Error } from "./common";

export const protobufPackage = "anomaly_questions";

export interface AnomalyQuestion {
  id: number;
  question: string;
  answer?: string | undefined;
  rosreestrUserName: string;
  createdAt: string;
  updatedAt: string;
}

export interface SearchQuestionRequest {
  question: string;
  rosreestrUserName: string;
}

export interface SearchQuestionResponse {
  anomalyQuestion?: AnomalyQuestion | undefined;
  error?:
    | Error
    | undefined;
  /** true if question was just created */
  isNew: boolean;
}

export interface AddQuestionWithAnswerRequest {
  question: string;
  answer: string;
  rosreestrUserName: string;
}

export interface AddQuestionWithAnswerResponse {
  anomalyQuestion?: AnomalyQuestion | undefined;
  error?: Error | undefined;
}

export interface GetQuestionsWithoutAnswerRequest {
  rosreestrUserName?: string | undefined;
}

export interface GetQuestionsWithoutAnswerResponse {
  questions: AnomalyQuestion[];
  error?: Error | undefined;
}

export interface UpdateAnswerRequest {
  id: number;
  answer: string;
}

export interface UpdateAnswerResponse {
  anomalyQuestion?: AnomalyQuestion | undefined;
  error?: Error | undefined;
}

export const ANOMALY_QUESTIONS_PACKAGE_NAME = "anomaly_questions";

export interface AnomalyQuestionsServiceClient {
  searchQuestion(request: SearchQuestionRequest): Observable<SearchQuestionResponse>;

  addQuestionWithAnswer(request: AddQuestionWithAnswerRequest): Observable<AddQuestionWithAnswerResponse>;

  getQuestionsWithoutAnswer(request: GetQuestionsWithoutAnswerRequest): Observable<GetQuestionsWithoutAnswerResponse>;

  updateAnswer(request: UpdateAnswerRequest): Observable<UpdateAnswerResponse>;
}

export interface AnomalyQuestionsServiceController {
  searchQuestion(
    request: SearchQuestionRequest,
  ): Promise<SearchQuestionResponse> | Observable<SearchQuestionResponse> | SearchQuestionResponse;

  addQuestionWithAnswer(
    request: AddQuestionWithAnswerRequest,
  ): Promise<AddQuestionWithAnswerResponse> | Observable<AddQuestionWithAnswerResponse> | AddQuestionWithAnswerResponse;

  getQuestionsWithoutAnswer(
    request: GetQuestionsWithoutAnswerRequest,
  ):
    | Promise<GetQuestionsWithoutAnswerResponse>
    | Observable<GetQuestionsWithoutAnswerResponse>
    | GetQuestionsWithoutAnswerResponse;

  updateAnswer(
    request: UpdateAnswerRequest,
  ): Promise<UpdateAnswerResponse> | Observable<UpdateAnswerResponse> | UpdateAnswerResponse;
}

export function AnomalyQuestionsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "searchQuestion",
      "addQuestionWithAnswer",
      "getQuestionsWithoutAnswer",
      "updateAnswer",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AnomalyQuestionsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AnomalyQuestionsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ANOMALY_QUESTIONS_SERVICE_NAME = "AnomalyQuestionsService";
