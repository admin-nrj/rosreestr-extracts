// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Error, User } from "./common";

export const protobufPackage = "users";

export interface AllUsersRequest {
}

export interface AllUsersResponse {
  users: User[];
  error?: Error | undefined;
}

export interface UserRequest {
  id?: number | undefined;
  email?: string | undefined;
}

export interface UserResponse {
  user?: User | undefined;
  error?: Error | undefined;
}

export interface UpdateUserRequest {
  id: number;
  email?: string | undefined;
  name?: string | undefined;
  role?: string | undefined;
  isActive?: boolean | undefined;
  emailVerified?: boolean | undefined;
  payCount?: number | undefined;
  pbxExtension?: number | undefined;
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  getAllUsers(request: AllUsersRequest): Observable<AllUsersResponse>;

  getUser(request: UserRequest): Observable<UserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;
}

export interface UsersServiceController {
  getAllUsers(request: AllUsersRequest): Promise<AllUsersResponse> | Observable<AllUsersResponse> | AllUsersResponse;

  getUser(request: UserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllUsers", "getUser", "updateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
